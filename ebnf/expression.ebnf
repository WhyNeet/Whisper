expression = term ;
term = factor { ( "+" | "-" ) factor } ;
factor = unary { ( "* | "/" ) unary } ;
unary = ( "!" | "-" ) fn_call | fn_call ;
fn_call = member_access "(" [ expression ] { "," expression } ")" | member_access ;
member_access = primary { "." IDENTIFIER } ;
primary = IDENTIFIER | NUMBER | grouping | block | "true" | "false" | struct_init | method_access ;
grouping = "(" expression ")" ;
block = "{" { statement } [ expression ] "}" ;
struct_init = [ "default" ] IDENTIFIER "{" { IDENTIFIER ":" expression "," } [ IDENTIFIER ":" expression [ "," ] ] "}" ;
method_access = IDENTIFIER { "::" IDENTIFIER } ;
